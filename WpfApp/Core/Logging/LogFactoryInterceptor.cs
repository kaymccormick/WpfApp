#region header
// Kay McCormick (mccor)
// 
// FileFinder3
// Common
// LogFactoryInterceptor.cs
// 
// 2020-01-28-11:01 PM
// 
// ---
#endregion
using Castle.DynamicProxy ;
using WpfApp.Proxy ;

namespace WpfApp.Core.Logging
{
    /// <summary></summary>
    /// <seealso cref="Castle.DynamicProxy.IInterceptor" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for LogFactoryInterceptor
    public class LogFactoryInterceptor : IInterceptor
    {
        /// <summary>Initializes a new instance of the <see cref="LogFactoryInterceptor"/> class.</summary>
        /// <param name="generator">The generator.</param>
        /// <param name="useLogMethod">The use log method.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public LogFactoryInterceptor (
            ProxyGenerator         generator
          , LogDelegates.LogMethod useLogMethod
        )
        {
            Generator    = generator ;
            UseLogMethod = useLogMethod ;
        }

        /// <summary>Gets the generator.</summary>
        /// <value>The generator.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Generator
        public ProxyGenerator Generator { get ; }

        /// <summary>Gets the use log method.</summary>
        /// <value>The use log method.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for UseLogMethod
        public LogDelegates.LogMethod UseLogMethod { get ; }

        /// <summary>Intercepts the specified invocation.</summary>
        /// <param name="invocation">The invocation.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Intercept
        public void Intercept ( IInvocation invocation )
        {
            UseLogMethod ( $"Method name is {invocation.Method.Name}" ) ;
            if ( invocation.Method.Name == "GetLogger" )
            {
                invocation.Proceed ( ) ;
                var inter = new LoggerInterceptor ( UseLogMethod ) ;
                var proxy = Generator.CreateClassProxyWithTarget (
                                                                  invocation.ReturnValue
                                                                , inter
                                                                 ) ;
                invocation.ReturnValue = proxy ;
            }
            else
            {
                invocation.Proceed ( ) ;
            }
        }
    }
}