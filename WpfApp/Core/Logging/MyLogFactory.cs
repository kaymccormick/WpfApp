using NLog ;

namespace WpfApp.Core.Logging
{
    /// <summary></summary>
    /// <seealso cref="NLog.LogFactory" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for MyLogFactory
    // ReSharper disable once ClassWithVirtualMembersNeverInherited.Global
    public class MyLogFactory : LogFactory
    {
        private readonly LogDelegates.LogMethod _doLogMessage ;

        /// <summary>Initializes a new instance of the <see cref="T:NLog.LogFactory"/>
        ///   class.</summary>
        // ReSharper disable once UnusedMember.Global
        public MyLogFactory ( ) { }

        /// <summary>Initializes a new instance of the <see cref="MyLogFactory"/> class.</summary>
        /// <param name="doLogMessage">The do log message.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public MyLogFactory ( LogDelegates.LogMethod doLogMessage )
        {
            _doLogMessage = doLogMessage ;
        }

        /// <summary>Gets the do log message.</summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDoLogMessage
        public virtual LogDelegates.LogMethod GetDoLogMessage ( ) { return _doLogMessage ; }

        /// <summary>Gets the specified named logger.</summary>
        /// <param name="name">Name of the logger.</param>
        /// <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument
        /// are not guaranteed to return the same logger reference.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetLogger
        public new Logger GetLogger ( string name )
        {
            var logger = base.GetLogger ( name ) ;
            if ( GetDoLogMessage ( ) != null )
            {
                GetDoLogMessage ( ) ( $"{name} = {logger}" ) ;
            }
            else
            {
                System.Diagnostics.Debug.WriteLine ( "oops" ) ;
            }

            return logger ;
        }
    }
}