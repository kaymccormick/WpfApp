#region header
// Kay McCormick (mccor)
// 
// FileFinder3
// WpfApp1
// RegistrationConverter2.cs
// 
// 2020-01-26-10:09 AM
// 
// ---
#endregion
using System ;
using System.Collections ;
using System.Collections.Generic ;
using System.Globalization ;
using System.Linq ;
using System.Windows.Data ;
using Autofac.Core ;
using Castle.DynamicProxy.Internal ;
using NLog ;
using WpfApp.Core.Infos ;
using WpfApp.Core.Model ;

namespace WpfApp.Core.Converters
{
    /// <summary></summary>
    /// <seealso cref="System.Windows.Data.IValueConverter" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for RegistrationConverter2
    public class RegistrationConverter2 : IValueConverter
    {
        /// <summary>The logger</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Logger
        private static readonly ILogger Logger = LogManager.GetCurrentClassLogger ( ) ;

        /// <summary>Converts a value. </summary>
        /// <param name="value">The value produced by the binding source.</param>
        /// <param name="targetType">The type of the binding target property.</param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        /// <returns>
        ///     A converted value. If the method returns <see langword="null" />, the
        ///     valid null value is used.
        /// </returns>
        public object Convert (
            object      value
          , Type        targetType
          , object      parameter
          , CultureInfo culture
        )
        {
            if ( value == null )
            {
                return null ;
            }

            Logger.Info ( $"{value.GetType ( )} {targetType} param={parameter};" ) ;
            var iComp = value as IComponentRegistration ;
            var comp = value as ComponentRegistration ;
            if ( comp     == null
                 && iComp == null )
            {
                Logger.Warn (
                             $"Wrong type {value.GetType ( )} {string.Join ( ", " , value.GetType ( ).GetAllInterfaces ( ).Select ( type => type.Name ) )}"
                            ) ;
                if ( targetType == typeof ( string ) )
                {
                    return "" ;
                }

                if ( targetType.IsSubclassOf ( typeof ( IEnumerable ) ) )
                {
                    return new object[ 0 ] ;
                }

                return null ;
            }

            // ReSharper disable once SuggestVarOrType_Elsewhere
            IList< InstanceInfo > x = comp?.Instances ?? new List<InstanceInfo>( ) ;
            Logger.Debug ( $"Using list of {string.Join ( ", " , x )}" ) ;

            if ( parameter is string )
            {
                return x.Count ;
            }

            if ( typeof ( IEnumerable ).IsAssignableFrom ( targetType ) )
            {
                return x ;
            }


            return null ;
        }


        /// <summary>Converts a value.</summary>
        /// <param name="value">The value that is produced by the binding target.</param>
        /// <param name="targetType">The type to convert to.</param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        /// <returns>
        ///     A converted value. If the method returns
        ///     <span class="keyword">
        ///         <span class="languageSpecificText">
        ///             <span class="cs">null</span><span class="vb">Nothing</span>
        ///             <span class="cpp">nullptr</span>
        ///         </span>
        ///     </span>
        ///     <span class="nu">
        ///         a null reference (<span class="keyword">Nothing</span>
        ///         in Visual Basic)
        ///     </span>
        ///     , the valid null value is used.
        /// </returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ConvertBack
        public object ConvertBack (
            object      value
          , Type        targetType
          , object      parameter
          , CultureInfo culture
        )
        {
            return - 1 ;
        }
    }
}