#region header
// Kay McCormick (mccor)
// 
// FileFinder3
// WpfApp1Tests3
// ContextStack.cs
// 
// 2020-01-20-6:15 AM
// 
// ---
#endregion

using System.Collections.Generic ;
using System.Collections.Specialized ;
using System.Linq ;
using WpfApp.Core.Exceptions ;
using static System.String ;

namespace WpfApp.Core.Infos
{
    /// <summary></summary>
    /// <typeparam name="T"></typeparam>
    /// <seealso cref="System.Collections.Generic.Stack{T}" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ContextStack`1
    // ReSharper disable once ClassNeverInstantiated.Global
    public class ContextStack < T > : Stack < T >
        where T : InfoContext
    {
        /// <summary>
        ///     Initializes a new instance of the
        ///     <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty
        ///     and
        ///     has the default initial capacity.
        /// </summary>
        // ReSharper disable once UnusedMember.Global
        public ContextStack ( ) { }

        /// <summary>
        ///     Initializes a new instance of the
        ///     <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty
        ///     and
        ///     has the default initial capacity.
        /// </summary>
        // ReSharper disable once UnusedMember.Global
        public ContextStack ( bool allowDuplicateNames )
        {
            AllowDuplicateNames = allowDuplicateNames ;
        }

        /// <summary>
        ///     Initializes a new instance of the
        ///     <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty
        ///     and
        ///     has the specified initial capacity or the default initial capacity,
        ///     whichever is greater.
        /// </summary>
        /// <param name="capacity">
        ///     The initial number of elements that the
        ///     <see cref="T:System.Collections.Generic.Stack`1" /> can contain.
        /// </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">
        ///     <paramref name="capacity" /> is less than zero.
        /// </exception>
        // ReSharper disable once UnusedMember.Global
        public ContextStack ( int capacity ) : base ( capacity ) { }

        /// <summary>
        ///     Initializes a new instance of the
        ///     <see cref="T:System.Collections.Generic.Stack`1" /> class that contains
        ///     elements copied from the specified collection and has sufficient
        ///     capacity
        ///     to accommodate the number of elements copied.
        /// </summary>
        /// <param name="collection">The collection to copy elements from.</param>
        /// <exception cref="T:System.ArgumentNullException">
        ///     <paramref name="collection" /> is <see langword="null" />.
        /// </exception>
        // ReSharper disable once UnusedMember.Global
        public ContextStack ( IEnumerable < T > collection ) : base ( collection ) { }
        // not sure this makes sense to set - thread safe and/or conflicts?
        // private static readonly Logger Logger =
        // LogManager.GetCurrentClassLogger();

        /// <summary>Gets a value indicating whether [allow duplicate names].</summary>
        /// <value>
        ///   <c>true</c> if [allow duplicate names]; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AllowDuplicateNames
        public bool AllowDuplicateNames { get ; } = true ;

        /// <summary>Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.</summary>
        /// <param name="item">
        /// The object to push onto the <see cref="T:System.Collections.Generic.Stack`1"/>. The value can be <span class="keyword"><span class="languageSpecificText"><span class="cs">null</span><span class="vb">Nothing</span><span class="cpp">nullptr</span></span></span><span class="nu">a null reference (<span class="keyword">Nothing</span> in Visual Basic)</span> for reference types.
        /// </param>
        /// <exception cref="DuplicateKeyException"></exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Push
        public new void Push ( T item )
        {
            // Logger.Trace($"{nameof(ContextStack<InfoContext>)}.Push ( {item}" );
            if ( ! AllowDuplicateNames
                 && this.Any ( context => context.Name == item.Name ) )
            {
                throw new DuplicateKeyException ( key : item.Name ) ;
            }

            base.Push ( item ) ;
            // Logger.Trace($"[{(this)}: New count is {Count}"  );
        }

        /// <summary>Returns a string that represents the current object.</summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString ( ) { return $"{Join ( "/" , this.Reverse ( ) )}" ; }

        // ReSharper disable once UnusedMember.Global
        /// <summary>Converts to ordered-dictionary.</summary>
        /// <returns></returns>
        /// <exception cref="DuplicateKeyException"></exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ToOrderedDictionary
        public OrderedDictionary ToOrderedDictionary ( )
        {
            var copyStack = new Stack < T > ( this ) ;
            while ( copyStack.Any ( ) )
            {
                var x = copyStack.Pop ( ) ;
                if ( copyStack.Any ( context => context.Name == x.Name ) )
                {
                    throw new DuplicateKeyException ( key : x.Name ) ;
                }
            }

            var r = new OrderedDictionary ( ) ;
            foreach ( var info in this.Reverse ( ) )
            {
                var key = info.Name ;
                r[ key ] = info.ObjectContext ;
            }

            return r ;
        }
    }
}