using System.Linq ;
using System.Windows ;
using System.Windows.Controls ;

namespace WpfApp.Core.Menus
{
    /// <summary></summary>
    /// <seealso cref="System.Windows.Controls.StyleSelector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for MenuItemContainerStyleSelector
    public class MenuItemContainerStyleSelector : StyleSelector
    {
        /// <summary>When overridden in a derived class, returns a <see cref="T:System.Windows.Style"/> based on custom logic.</summary>
        /// <param name="item">The content.</param>
        /// <param name="container">The element to which the style will be applied.</param>
        /// <returns>
        /// Returns an application-specific style to apply; otherwise, <span class="keyword"><span class="languageSpecificText"><span class="cs">null</span><span class="vb">Nothing</span><span class="cpp">nullptr</span></span></span><span class="nu">a null reference (<span class="keyword">Nothing</span> in Visual Basic)</span>.
        /// </returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SelectStyle
        public override Style SelectStyle ( object item , DependencyObject container )
        {
            if ( item is XMenuItem x )
            {
                if ( x.Children.Any ( ) )
                {
                    if ( container is FrameworkElement ic )
                    {
                        return ic.FindResource ( "MenuItemWithChildren" ) as Style ;
                    }
                }
                else
                {
                    if ( container is FrameworkElement ic )
                    {
                        return ic.FindResource ( "MenuItemNoChildren" ) as Style ;
                    }
                }
            }

            return base.SelectStyle ( item , container ) ;
        }
    }
}