#region header
// Kay McCormick (mccor)
// 
// FileFinder3
// AppShared
// ResolveService.cs
// 
// 2020-01-28-2:53 AM
// 
// ---
#endregion
using System ;
using System.Windows ;
using Autofac.Core ;
using NLog ;

namespace WpfApp.Core
{
    /// <summary></summary>
    /// <seealso cref="System.Windows.FrameworkElement" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ResolveService
    public class ResolveService : FrameworkElement
    {
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

        /// <summary>The lifetime scope property</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LifetimeScopeProperty
        public static readonly DependencyProperty LifetimeScopeProperty =
            Props.LifetimeScopeProperty ;

        /// <summary>The service instance changed event</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ServiceInstanceChangedEvent
        public static readonly RoutedEvent ServiceInstanceChangedEvent =
            EventManager.RegisterRoutedEvent (
                                              "ServiceInstanceChanged"
                                            , RoutingStrategy.Direct
                                            , typeof ( RoutedPropertyChangedEventHandler < object >
                                              )
                                            , typeof ( ResolveService )
                                             ) ;

        /// <summary>The service instance property</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ServiceInstanceProperty
        public static readonly DependencyProperty ServiceInstanceProperty =
            DependencyProperty.Register (
                                         "ServiceInstance"
                                       , typeof ( object )
                                       , typeof ( ResolveService )
                                       , new FrameworkPropertyMetadata (
                                                                        null
                                                                      , FrameworkPropertyMetadataOptions
                                                                           .None
                                                                      , OnServiceInstanceChanged
                                                                      , CoerceValueCallback
                                                                       )
                                        ) ;

        /// <summary>Gets or sets the type of the service.</summary>
        /// <value>The type of the service.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ServiceType
        public Type ServiceType { get ; set ; }

        /// <summary>Gets or sets the service instance.</summary>
        /// <value>The service instance.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ServiceInstance
        public object ServiceInstance
        {
            get => GetValue ( ServiceInstanceProperty ) ;
            set => SetValue ( ServiceInstanceProperty , value ) ;
        }

        /// <summary>Gets or sets the service.</summary>
        /// <value>The service.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Service
        public Service Service { get ; set ; }

        private static void OnServiceInstanceChanged (
            DependencyObject                   d
          , DependencyPropertyChangedEventArgs e
        )
        {
            var s = d as ResolveService ;
            s?.RaiseEvent (
                           new RoutedPropertyChangedEventArgs < object > ( e.OldValue , e.NewValue )
                          ) ;
        }

        private static object CoerceValueCallback ( DependencyObject d , object baseValue )
        {
            return baseValue ;
        }


        // ReSharper disable once EventNeverSubscribedTo.Global
        /// <summary>Occurs when [service instance changed].</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ServiceInstanceChanged
        public event RoutedPropertyChangedEventHandler < object > ServiceInstanceChanged
        {
            add => AddHandler ( ServiceInstanceChangedEvent , value ) ;
            remove => RemoveHandler ( ServiceInstanceChangedEvent , value ) ;
        }

        /// <summary>
        ///     Raises the
        ///     <see cref="E:System.Windows.FrameworkElement.Initialized" /> event. This
        ///     method is invoked whenever
        ///     <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to
        ///     <see langword="true " />internally.
        /// </summary>
        /// <param name="e">
        ///     The <see cref="T:System.Windows.RoutedEventArgs" /> that
        ///     contains the event data.
        /// </param>
        protected override void OnInitialized ( EventArgs e )
        {
            base.OnInitialized ( e ) ;
            Logger.Debug ( $"{nameof ( OnInitialized )}" ) ;
            Logger.Debug (
                          "Value of Lifetimescopeproperty is " + GetValue ( LifetimeScopeProperty )
                         ) ;
        }
    }
}