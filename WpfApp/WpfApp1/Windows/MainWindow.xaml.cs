using System ;
using System.Collections ;
using System.Collections.Generic ;
using System.Diagnostics ;
using System.Globalization ;
using System.IO ;
using System.Linq ;
using System.Reactive.Concurrency ;
using System.Reactive.Linq ;
using System.Reflection ;
using System.Windows ;
using System.Windows.Controls ;
using System.Windows.Data ;
using System.Windows.Input ;
using System.Windows.Markup ;
using System.Windows.Threading ;
using Autofac ;
using Autofac.Core ;
using Common.Logging ;
using NLog ;
using NLog.Config ;
using Vanara.Extensions.Reflection ;
using WpfApp ;
using WpfApp.Core.Interfaces ;
using WpfApp1.Attributes ;
using WpfApp1.Menus ;

namespace WpfApp1.Windows
{
    /// <summary>
    ///     Interaction logic for MainWindow.xaml
    /// </summary>
    /// public c
    [ WindowMetadata ( "Main Window" ) ]
    public partial class OldMainWindow : Window , IHaveLogger

    {
        public LoggingConfiguration Configuration { get ; set ; }

        public static DependencyProperty LifetimeScopeProperty = Props.LifetimeScopeProperty ;

        public static DependencyProperty MenuItemListCollectionViewProperty =
            Props.MenuItemListCollectionViewProperty ;

        /// <summary>
        ///     Adds a specified object as the child of a
        ///     <see cref="T:System.Windows.Controls.ContentControl" />.
        /// </summary>
        /// <param name="value">The object to add.</param>
        protected override void AddChild ( object value )
        {
            Logger.Debug ( $"{nameof ( AddChild )}:{value} {value.GetType ( )}" ) ;
            base.AddChild ( value ) ;
        }

        public void RecurseDiscover ( object ui )
        {
            if ( ui == null )
            {
                Logger.Warn ( "null" ) ;
                return ;
            }

            if ( ui is string )
            {
                //	Logger.Warn ( $"string is {(ui as string).Substring(0, 32)}" ) ;
                return ;
            }

            var uie = ui as UIElement ;
            var fe = ui as FrameworkElement ;
            string desc ;
            var qqq = Attribute.GetCustomAttribute (
                                                    ui.GetType ( )
                                                  , typeof ( RuntimeNamePropertyAttribute )
                                                   ) ;
            if ( qqq != null )
            {
                desc = ui.GetPropertyValue < string > (
                                                       ( qqq as RuntimeNamePropertyAttribute )?.Name
                                                      ) ;
            }
            else
            {
                if ( fe     == null
                     && uie == null )
                {
                    return ;
                }

                desc = fe != null ? fe.Name : uie.Uid ;
            }

            var qq = Attribute.GetCustomAttribute (
                                                   ui.GetType ( )
                                                 , typeof ( ContentPropertyAttribute )
                                                  ) ;
            Logger.Error ( $"child {desc} ({ui.GetType ( )})" ) ;
            if ( qq != null )
            {
                var content =
                    ui.GetPropertyValue < object > ( ( qq as ContentPropertyAttribute )?.Name ) ;
                if ( content is IEnumerable enumerable
                     && enumerable.GetType ( ) != typeof ( string ) )
                {
                    foreach ( var child in enumerable )
                    {
                        RecurseDiscover ( child ) ;
                    }
                }
                else
                {
                    RecurseDiscover ( content ) ;
                }

                return ;
            }


            if ( ui is ItemsControl ic )
            {
                foreach ( var item in ic.Items )
                {
                    RecurseDiscover ( item ) ;
                }
            }
            else if ( ui is ContentControl cc )
            {
                RecurseDiscover ( cc.Content ) ;
            }
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OldMainWindow" />
        ///     class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public OldMainWindow ( )
        {
            InitializeComponent ( ) ;

#if TRACEUPDATES
            AddHandler (
                            App.LifetimeScopeChangedEvent
                      , new RoutedPropertyChangedEventHandler<ILifetimeScope> ( UpdatedScope )
                           );
#endif
            Loaded += OnLoaded ;

            //RecurseDiscover(Content ) ;
            var target = MyCacheTarget.GetInstance ( 1000 ) ;
            target.Cache.SubscribeOn ( Scheduler.Default )
                  .Buffer ( TimeSpan.FromMilliseconds ( 100 ) )
                  .Where ( x => x.Any ( ) )
                  .ObserveOnDispatcher ( DispatcherPriority.Background )
                  .Subscribe (
                              infos => {
                                  foreach ( var info in infos )
                                  {
                                      if ( info.Level != LogLevel.Trace )
                                      {
                                          LogEvents.Add ( info ) ;
                                      }
                                  }
                              }
                             ) ;

            AddHandler (
                        Props.MenuItemListCollectionViewChangedEvent
                      , new RoutedPropertyChangedEventHandler < CollectionView > (
                                                                                  OnMenuItemListCollectionViewChanged
                                                                                 )
                       ) ;
        }

#if TRACEUPDATES
        private void UpdatedScope (
            object sender
      , RoutedPropertyChangedEventArgs<ILifetimeScope> e
        )
        {
            Logger.Warn ( "updated scope " + e.NewValue.Tag );
        }
#endif

        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private void OnLoaded ( object sender , RoutedEventArgs e )
        {
            DoRestart                        = false ;
            Application.Current.ShutdownMode = ShutdownMode.OnLastWindowClose ;
        }

        /// <summary>Gets or sets the log events.</summary>
        /// <value>The log events.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LogEvents
        public LogEventInfoCollection LogEvents { get ; set ; } = new LogEventInfoCollection (
                                                                                              new[]
                                                                                              {
                                                                                                  new
                                                                                                      LogEventInfo (
                                                                                                                    LogLevel
                                                                                                                       .Info
                                                                                                                  , "Example log"
                                                                                                                  , "Example"
                                                                                                                   )
                                                                                                , new
                                                                                                      LogEventInfo (
                                                                                                                    LogLevel
                                                                                                                       .Info
                                                                                                                  , "Example"
                                                                                                                  , "lala 123"
                                                                                                                   )
                                                                                                , new
                                                                                                      LogEventInfo (
                                                                                                                    LogLevel
                                                                                                                       .Debug
                                                                                                                  , "deep"
                                                                                                                  , "lala 123"
                                                                                                                   )
                                                                                              }
                                                                                             ) ;

#pragma warning disable 1591
        public ILogger Logger { get ; set ; } = LogManager.GetCurrentClassLogger ( ) ;
#pragma warning restore 1591

        /// <summary>Called when [menu item list collection view changed].</summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">
        ///     The
        ///     <see cref="RoutedPropertyChangedEventArgs{CollectionView}" /> instance
        ///     containing the event data.
        /// </param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnMenuItemListCollectionViewChanged
        private void OnMenuItemListCollectionViewChanged (
            object                                            sender
          , RoutedPropertyChangedEventArgs < CollectionView > e
        )
        {
            if ( ReferenceEquals ( e.Source , this ) )
            {
                var menu = Template.FindName ( "appMenu" , this ) as Menu ;
                var c = e.NewValue ;

                foreach ( IMenuItem menuItem in c )
                {
                    menu?.Items.Add ( MenuHelper.MakeMenuItem ( menuItem ) ) ;
                }

                Logger.Trace ( e.RoutedEvent.Name + " changed" ) ;
                DumpRoutedPropertyChangedEventArgs ( e ) ;
                e.Handled = true ;
            }
            else
            {
                Logger.Warn ( $"ignoring {e.RoutedEvent.Name} from {e.Source}" ) ;
            }
        }

        private void DumpRoutedPropertyChangedEventArgs < T > (
            RoutedPropertyChangedEventArgs < T > args
        )
        {
            Logger.Trace ( "OldValue = "    + args.OldValue ) ;
            Logger.Debug ( "NewValue = "    + args.NewValue ) ;
            Logger.Debug ( "RoutedEvent = " + args.RoutedEvent ) ;
            Logger.Debug ( "Source = "      + args.Source ) ;
        }

        /// <summary>Handles the OnClick event of the Refresh control.</summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">
        ///     The <see cref="RoutedEventArgs" /> instance containing the
        ///     event data.
        /// </param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Refresh_OnClick
        private void Refresh_OnClick ( object sender , RoutedEventArgs e ) { }

        /// <summary>Gets or sets the lifetime scope.</summary>
        /// <value>The lifetime scope.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LifetimeScope
        public ILifetimeScope LifetimeScope
        {
            get => ( ILifetimeScope ) GetValue ( LifetimeScopeProperty ) ;
            // ReSharper disable once UnusedMember.Global
            set => SetValue ( LifetimeScopeProperty , value ) ;
        }

        private void CommandBinding_OnExecuted ( object sender , ExecutedRoutedEventArgs e )
        {
            var module1BinDebugModule1Dll = @"..\..\..\..\Module1\module1\bin\debug\module1.dll" ;

            var f = new FileInfo ( module1BinDebugModule1Dll ) ;
            if ( ! f.Exists )
            {
                Logger.Warn ( "dll does not exist" ) ;
                return ;
            }

            try
            {
                Logger.Warn ( "Loading assembly {f.FullName}" ) ;
                var loadFile = Assembly.LoadFile ( f.FullName ) ;
                var childScope = LifetimeScope.BeginLifetimeScope (
                                                                   b => {
                                                                       b.RegisterAssemblyModules (
                                                                                                  loadFile
                                                                                                 ) ;
                                                                   }
                                                                  ) ; //LifetimeScope = childScope ;
            }
            catch ( Exception ex )
            {
                Logger.Fatal ( ex , $"{ex.Message}" ) ;
            }

        }

        private void DumpDebug ( object sender , ExecutedRoutedEventArgs e )
        {
            var foo = LifetimeScope.Resolve < IEnumerable < TraceListener > > ( ) ;
            foreach ( var q in foo )
            {
            }
        }

        // ReSharper disable once UnusedMember.Local
        private void OnRestart ( object sender , ExecutedRoutedEventArgs e )
        {
            DoRestart                        = true ;
            Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown ;
            Close ( ) ;
        }

        /// <summary>Raises the <see cref="E:System.Windows.Window.Closed" /> event.</summary>
        /// <param name="e">
        ///     An <see cref="T:System.EventArgs" /> that contains the event
        ///     data.
        /// </param>
        protected override void OnClosed ( EventArgs e )
        {
            if ( DoRestart )
            {
                var newWindow = new OldMainWindow ( ) ;
                newWindow.Show ( ) ;
            }

            base.OnClosed ( e ) ;
        }

        /// <summary>Gets or sets a value indicating whether [do restart].</summary>
        /// <value>
        ///   <c>true</c> if [do restart]; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DoRestart
        public bool DoRestart { get ; set ; }

        private void Restart ( object sender , ExecutedRoutedEventArgs e )
        {
            DoRestart                        = true ;
            Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown ;
            Close ( ) ;
        }

        private void InstancesOnly_OnChecked ( object sender , RoutedEventArgs e )
        {
            Logger.Debug ( "checked" ) ;
            var x = sender as CheckBox ;
            var collectionViewSource =
                x.TryFindResource ( "Registrations" ) as CollectionViewSource ;
            var tryFindResource = TryFindResource ( "RegistrationConverter" ) ;
            if ( tryFindResource == null )
            {
                return ;
            }

            var converter = tryFindResource as IValueConverter ;
            if ( converter == null )
            {
                return ;
            }

            CheckedHandler = ( o , args ) => {
                args.Accepted = false ;
                var componentRegistration = args.Item as IComponentRegistration ;
                var convert = converter.Convert (
                                                 args.Item
                                               , typeof ( int )
                                               , "Count"
                                               , CultureInfo.CurrentUICulture
                                                ) ;
                try
                {
                    var count = ( int ) convert ;
                    if ( count > 0 )
                    {
                        args.Accepted = true ;
                    }
                }
                catch ( Exception )
                {
                }
            } ;
            collectionViewSource.Filter += CheckedHandler ;
        }

        public FilterEventHandler CheckedHandler { get ; set ; }


        private void InstancesOnly_OnUnchecked ( object sender , RoutedEventArgs e )
        {
            var x = sender as CheckBox ;
            var collectionViewSource =
                x.TryFindResource ( "Registrations" ) as CollectionViewSource ;
            collectionViewSource.Filter -= CheckedHandler ;
            CheckedHandler              =  null ;
        }
#if NLOGVIEWER
        private void ButtonBase_OnClick ( object sender , RoutedEventArgs e )
        {
            {
                var provider = new NLogViewerProvider (
                                                       new NetworkSettings ( )
                                                       {
                                                           Port = NetConfig.Port
                                                 , Protocol =
                                                               NetConfig.IsUdp
                                                                   ? NetworkProtocol.Udp
                                                                   : NetworkProtocol.Tcp
                                                      ,
                                                       }
                                                      ) ;
                provider.Start ( ) ;
                // provider.Logger = MyLogger ;
            }
        }
#endif


        // public Sentinel.Interfaces.ILogger MyLogger { get ; set ; } = new MyLogger ( ) ;

        private void LoadInstance ( object sender , ExecutedRoutedEventArgs e )
        {
            var v = e.Parameter.GetPropertyValue < object > ( "Value" ) ;
            //Lazy<object> l = e.Parameter as Lazy < object > ;
            //var v = l.Value ;
            Logger.Debug ( "loaded " + v ) ;
        }

        private void Metadata ( object sender , ExecutedRoutedEventArgs e )
        {
            var v =
                e.Parameter.GetPropertyValue < IDictionary < string , object > > ( "Metadata" ) ;
            foreach ( var keyValuePair in v )
            {
                Logger.Debug ( $"{keyValuePair.Key} = {keyValuePair.Value}" ) ;
            }

            //Lazy<object> l = e.Parameter as Lazy < object > ;
            //var v = l.Value ;
        }
    }
}