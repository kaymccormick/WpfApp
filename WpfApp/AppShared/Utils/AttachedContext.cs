using System ;
using System.Linq ;
using AppShared.Infos ;

namespace AppShared.Utils
{
    /// <summary></summary>
    /// <seealso cref="System.IDisposable" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for AttachedContext
    public class AttachedContext : IDisposable
    {
        private readonly InfoContext                  _infoContext ;
        private readonly ContextStack < InfoContext > contextStack ;

        /// <summary>Initializes a new instance of the <see cref="AttachedContext"/> class.</summary>
        /// <param name="contextStack">The context stack.</param>
        /// <param name="context">The context.</param>
        /// <exception cref="System.ArgumentNullException">contextStack</exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public AttachedContext ( ContextStack < InfoContext > contextStack , InfoContext context )
        {
            this.contextStack =
                contextStack ?? throw new ArgumentNullException ( nameof ( contextStack ) ) ;
            _infoContext = context ;
            contextStack.Push ( _infoContext ) ;
        }

        /// <summary>
        ///     Performs application-defined tasks associated with freeing, releasing,
        ///     or resetting unmanaged resources.
        /// </summary>
        public void Dispose ( )
        {
            Dispose ( true ) ;
            GC.SuppressFinalize ( this ) ;
        }

        protected virtual void Dispose ( bool b )
        {
            if ( ! b )
            {
                return ;
            }

            if ( ! contextStack.Any ( ) )
            {
                throw new ContextStackException ( "Empty stack - expected at least one elmeent" ) ;
            }

            //Assert.NotEmpty ( contextStack ) ;
            if ( ! contextStack.Peek ( ).Equals ( _infoContext ) )
            {
                throw new ContextStackException ( "" ) ;
            }

            //Assert.True ( ReferenceEquals ( _infoContext , contextStack.First ( ) ) ) ;
            contextStack.Pop ( ) ;
        }
    }
}