using System ;
using System.ComponentModel ;
using System.Globalization ;
using System.Windows.Data ;
using NLog.Targets ;

namespace Common.Converters
{
    /// <summary></summary>
    /// <seealso cref="System.ComponentModel.TypeConverter" />
    /// <seealso cref="System.Windows.Data.IValueConverter" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TargetConverter
    public class TargetConverter : TypeConverter , IValueConverter
    {
        /// <summary>Converts a value. </summary>
        /// <param name="value">The value produced by the binding source.</param>
        /// <param name="targetType">The type of the binding target property.</param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        /// <returns>
        ///     A converted value. If the method returns <see langword="null" />, the
        ///     valid null value is used.
        /// </returns>
        object IValueConverter.Convert (
            object      value
          , Type        targetType
          , object      parameter
          , CultureInfo culture
        )
        {
            return Convert ( value , targetType , parameter , culture ) ;
        }

        /// <summary>Converts a value. </summary>
        /// <param name="value">The value that is produced by the binding target.</param>
        /// <param name="targetType">The type to convert to.</param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        /// <returns>
        ///     A converted value. If the method returns <see langword="null" />, the
        ///     valid null value is used.
        /// </returns>
        object IValueConverter.ConvertBack (
            object      value
          , Type        targetType
          , object      parameter
          , CultureInfo culture
        )
        {
            return ConvertBack ( value , targetType , parameter , culture ) ;
        }

        /// <summary>
        ///     Returns whether this converter can convert the object to the specified
        ///     type, using the specified context.
        /// </summary>
        /// <param name="context">
        ///     An
        ///     <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that
        ///     provides
        ///     a format context.
        /// </param>
        /// <param name="destinationType">
        ///     A <see cref="T:System.Type" /> that represents
        ///     the type you want to convert to.
        /// </param>
        /// <returns>
        ///     <see langword="true" /> if this converter can perform the conversion;
        ///     otherwise, <see langword="false" />.
        /// </returns>
        public override bool CanConvertTo ( ITypeDescriptorContext context , Type destinationType )
        {
            if ( destinationType == typeof ( string ) )
            {
                return true ;
            }

            return base.CanConvertTo ( context , destinationType ) ;
        }

        /// <summary>
        ///     Converts the given value object to the specified type, using the
        ///     specified context and culture information.
        /// </summary>
        /// <param name="context">
        ///     An
        ///     <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that
        ///     provides
        ///     a format context.
        /// </param>
        /// <param name="culture">
        ///     A <see cref="T:System.Globalization.CultureInfo" />. If
        ///     <see langword="null" /> is passed, the current culture is assumed.
        /// </param>
        /// <param name="value">The <see cref="T:System.Object" /> to convert.</param>
        /// <param name="destinationType">
        ///     The <see cref="T:System.Type" /> to convert the
        ///     <paramref name="value" /> parameter to.
        /// </param>
        /// <returns>
        ///     An <see cref="T:System.Object" /> that represents the converted
        ///     value.
        /// </returns>
        /// <exception cref="T:System.ArgumentNullException">
        ///     The
        ///     <paramref name="destinationType" /> parameter is <see langword="null" />
        ///     .
        /// </exception>
        /// <exception cref="T:System.NotSupportedException">
        ///     The conversion cannot be
        ///     performed.
        /// </exception>
        public override object ConvertTo (
            ITypeDescriptorContext context
          , CultureInfo            culture
          , object                 value
          , Type                   destinationType
        )
        {
            try
            {
                var target = value as Target ;
                if ( target is NetworkTarget n )
                {
                    return n.Address ;
                }
            }
            catch ( Exception )
            {
                // ignored
            }

            return base.ConvertTo ( context , culture , value , destinationType ) ;
        }

        /// <summary>Converts a value. </summary>
        /// <param name="value">The value produced by the binding source.</param>
        /// <param name="targetType">The type of the binding target property.</param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        /// <returns>
        ///     A converted value. If the method returns <see langword="null" />, the
        ///     valid null value is used.
        /// </returns>
        public object Convert (
            object value
          , Type   targetType
          , object parameter
            // ReSharper disable once UnusedParameter.Global
          , CultureInfo culture
        )
        {
            // var typeDescriptionProvider = new TypeDescriptionProvider();
            // var customTypeDescriptor = typeDescriptionProvider.GetTypeDescriptor( value );
            if ( ( string ) parameter == "GetType" )
            {
                return ConvertTo ( value.GetType ( ) , targetType ) ;
            }

            return ConvertTo ( value , targetType ) ;
        }

        /// <summary>Converts a value. </summary>
        /// <param name="value">The value that is produced by the binding target.</param>
        /// <param name="targetType">The type to convert to.</param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        /// <returns>
        ///     A converted value. If the method returns <see langword="null" />, the
        ///     valid null value is used.
        /// </returns>
        public object ConvertBack (
            // ReSharper disable twice UnusedParameter.Global
            object value
          , Type   targetType
            // ReSharper disable twice UnusedParameter.Global
          , object      parameter
          , CultureInfo culture
        )
        {
            throw new NotImplementedException ( ) ;
        }
    }
}