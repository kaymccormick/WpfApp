#region header
// Kay McCormick (mccor)
// 
// PsProject
// WpfTestApp
// ProxyUtils.cs
// 
// 2020-02-01-6:58 AM
// 
// ---
#endregion
using System ;
using System.Collections.Generic ;
using System.Collections.ObjectModel ;
using System.ComponentModel ;
using System.IO ;
using System.Linq ;
using System.Reflection ;
using System.Threading ;
using System.Windows.Markup ;
using System.Xaml ;
using System.Xaml.Schema ;
using System.Xml ;
using Castle.DynamicProxy ;
using XamlReader = System.Xaml.XamlReader ;

/* imported form psproject */
namespace WpfApp.Proxy
{
    /// <summary></summary>
    /// <seealso cref="BaseInterceptor" />
    /// <autogeneratedoc />C:\Users\mccor.LAPTOP-T6T0BN1K\source\repos\v2\WpfApp\WpfApp\ProxyUtils.cs
    /// TODO Edit XML Comment Template for BaseInterceptorImpl
    public class BaseInterceptorImpl : BaseInterceptor
    {
        private          int         _callDepth ;
        private readonly Stack < X > _stack = new Stack < X > ( ) ;

        /// <summary>Initializes a new instance of the <see cref="BaseInterceptorImpl"/> class.</summary>
        /// <param name="out">The out.</param>
        /// <param name="generator">The generator.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public BaseInterceptorImpl ( Action < string > @out , ProxyGenerator generator = null ) :
            base ( generator )
        {
            WriteLine = @out ;
        }

        /// <summary>Intercepts the specified invocation.</summary>
        /// <param name="invocation">The invocation.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Intercept
        public override void Intercept ( IInvocation invocation )
        {
            Interlocked.Increment ( ref _callDepth ) ;
            var x = _stack.Any ( ) ? _stack.Peek ( ) : null ;
            var myX = new X ( ) ;
            _stack.Push ( myX ) ;
            var writeLine = WriteLine ;
            if ( x != null )
            {
                x.Written = true ;
                writeLine ( "" ) ;
            }

            DumpInvocation ( invocation , _callDepth ) ;
            invocation.Proceed ( ) ;
            try
            {
                DumpReturnValue ( invocation , _callDepth , ! myX.Written ) ;
                if ( ProxyGenerator            != null
                     && invocation.ReturnValue != null
                     && ! invocation.ReturnValue.GetType ( ).IsSealed
                     && ! ( invocation.ReturnValue is IProxyTargetAccessor ) )
                {
                    var r = invocation.ReturnValue ;
                    if ( r is XamlType typ )
                    {
                        var invoker =
                            ( XamlTypeInvoker ) ProxyGenerator.CreateClassProxyWithTarget (
                                                                                           typeof (
                                                                                               XamlTypeInvoker
                                                                                           )
                                                                                         , typ
                                                                                              .Invoker
                                                                                         , new[]
                                                                                           {
                                                                                               r
                                                                                           }
                                                                                         , this
                                                                                          ) ;
                        object[] args = { typ.UnderlyingType , typ.SchemaContext , invoker } ;


                        invocation.ReturnValue =
                            ProxyGenerator.CreateClassProxyWithTarget (
                                                                       r.GetType ( )
                                                                     , r
                                                                     , args
                                                                     , this
                                                                      ) ;
                    }
                    else if ( r.GetType ( ).IsGenericType
                              && r.GetType ( ).GetGenericTypeDefinition ( )
                              == typeof ( XamlValueConverter < object > )
                                 .GetGenericTypeDefinition ( ) )
                    {
                        object[] args = null ;
                        if ( r is XamlValueConverter < ValueSerializer > q )
                        {
                            args = new object[] { q.ConverterType , q.TargetType , q.Name } ;
                        }
                        else if ( r is XamlValueConverter < TypeConverter > z )
                        {
                            args = new object[] { z.ConverterType , z.TargetType , z.Name } ;
                        }

                        if ( args != null )
                        {
                            invocation.ReturnValue =
                                ProxyGenerator.CreateClassProxyWithTarget (
                                                                           r.GetType ( )
                                                                         , r
                                                                         , args
                                                                         , this
                                                                          ) ;
                        }
                    }
                    else if ( r.GetType ( ).IsGenericType
                              && r.GetType ( ).GetGenericTypeDefinition ( )
                              == typeof ( ReadOnlyCollection < object > )
                                 .GetGenericTypeDefinition ( ) )
                    {
                        var propInfo = r.GetType ( )
                                        .GetField (
                                                   "list"
                                                 , BindingFlags.NonPublic | BindingFlags.Instance
                                                  ) ;
                        if ( propInfo != null )
                        {
                            var args = new[] { propInfo.GetValue ( r ) } ;
                            invocation.ReturnValue =
                                ProxyGenerator.CreateClassProxyWithTarget (
                                                                           r.GetType ( )
                                                                         , r
                                                                         , args
                                                                         , this
                                                                          ) ;
                        }
                    }
                    else if ( r is XamlDirective d )
                    {
                        object[] args =
                        {
                            d.GetXamlNamespaces ( ) , d.Name , d.Type , d.TypeConverter
                          , d.AllowedLocation
                        } ;

                        invocation.ReturnValue =
                            ProxyGenerator.CreateClassProxyWithTarget (
                                                                       r.GetType ( )
                                                                     , r
                                                                     , args
                                                                     , this
                                                                      ) ;
                    }
                    else if ( r is NamespaceDeclaration ns )
                    {
                        invocation.ReturnValue =
                            ProxyGenerator.CreateClassProxyWithTarget (
                                                                       r.GetType ( )
                                                                     , r
                                                                     , new object[]
                                                                       {
                                                                           ns.Namespace , ns.Prefix
                                                                       }
                                                                     , this
                                                                      ) ;
                    }
                    else

                    {
                        try
                        {
                            invocation.ReturnValue =
                                ProxyGenerator.CreateClassProxyWithTarget (
                                                                           r.GetType ( )
                                                                         , r
                                                                         , this
                                                                          ) ;
                        }
                        catch ( InvalidProxyConstructorArgumentsException )
                        {
                            writeLine ( "Constructors for ⮜" + FormatTyp ( r.GetType ( ) ) + "⮞" ) ;
                            foreach ( var constructorInfo in r.GetType ( ).GetConstructors ( ) )
                            {
                                writeLine (
                                           FormatTyp ( constructorInfo.DeclaringType )
                                           + " ( "
                                           + string.Join (
                                                          " , "
                                                        , constructorInfo
                                                         .GetParameters ( )
                                                         .Select (
                                                                  ( info , i )
                                                                      => FormatTyp (
                                                                                    info
                                                                                       .ParameterType
                                                                                   )
                                                                         + " "
                                                                         + info.Name
                                                                         + ( info.HasDefaultValue
                                                                                 ? " = "
                                                                                   + info
                                                                                      .DefaultValue
                                                                                 : "" )
                                                                 )
                                                         )
                                          ) ;
                            }
                        }
                    }
                }
            }
            catch ( Exception ex )
            {
                writeLine ( "--Exception--" ) ;
                writeLine ( ex.ToString ( ) ) ; //.GetType ( ) ) ;
                //Console.WriteLine ( ex.Message ) ;
                writeLine ( "--End Exception--" ) ;
            }
            finally
            {
                _stack.Pop ( ) ;
                Interlocked.Decrement ( ref _callDepth ) ;
            }
        }
    }

    /// <summary></summary>
    /// <seealso cref="ProxyUtilsBase" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ProxyUtils
    internal class ProxyUtils : ProxyUtilsBase
    {
        /// <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        public ProxyUtils ( Action < string > writeOut , IInterceptor interceptor ) : base (
                                                                                            writeOut
                                                                                          , interceptor
                                                                                           )
        {
        }
    }

    internal class ProxyUtilsBase
    {
        // ReSharper disable once NotAccessedField.Local
        private          Action < string > _writeOut ;
        private readonly IInterceptor      _interceptor ;

        /// <summary>The proxy generator</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _proxyGenerator
        protected static readonly ProxyGenerator ProxyGenerator = new ProxyGenerator ( ) ;

        /// <summary>Initializes a new instance of the <see cref="ProxyUtilsBase"/> class.</summary>
        /// <param name="writeOut"></param>
        /// <param name="interceptor"></param>
        protected ProxyUtilsBase ( Action < string > writeOut , IInterceptor interceptor )
        {
            _writeOut    = writeOut ;
            _interceptor = interceptor ;
            //_interceptor = new BaseInterceptorImpl ( _writeOut , _proxyGenerator ) ;
        }

        /// <summary>Creates the interceptor.</summary>
        /// <param name="out">The out.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateInterceptor
        // ReSharper disable once UnusedMember.Global
        public static IInterceptor CreateInterceptor ( Action < string > @out )
        {
            return new BaseInterceptorImpl ( @out ) ;
        }

        // ReSharper disable once UnusedMember.Global
        public string DumpIt ( object instance )
        {
            var stringWriter = CreateStringWriter ( ) ;

            var xmlWriterProxy = CreateXmlWriter ( stringWriter ) ;
            var context = CreateXamlSchemaContext ( ) ;
            var settings = CreateXamlObjectReaderSettings ( ) ;
            var reader = CreateXamlObjectReader ( instance , context , settings ) ;

            var xamlWriterProxy = CreateXamlXmlWriter ( xmlWriterProxy , context ) ;


            try
            {
                XamlServices.Transform ( ( XamlReader ) reader , xamlWriterProxy , true ) ;
                //XamlServices.Save (xamlWriterProxy , this ) ;
            }
            catch ( Exception ex )
            {
                Console.WriteLine ( ex ) ;
            }

            return stringWriter.ToString ( ) ;
        }

        /// <summary>Creates the xaml XML writer.</summary>
        /// <param name="xmlWriterProxy">The XML writer proxy.</param>
        /// <param name="context">The context.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateXamlXmlWriter
        // ReSharper disable once VirtualMemberNeverOverridden.Global
        protected virtual XamlXmlWriter CreateXamlXmlWriter (
            XmlWriter         xmlWriterProxy
          , XamlSchemaContext context
        )
        {
            var xamlWriterProxy = ( XamlXmlWriter ) ProxyGenerator.CreateClassProxy (
                                                                                     typeof (
                                                                                         XamlXmlWriter
                                                                                     )
                                                                                   , new object[]
                                                                                     {
                                                                                         xmlWriterProxy
                                                                                       , context
                                                                                     }
                                                                                   , _interceptor
                                                                                    ) ;
            return xamlWriterProxy ;
        }

        /// <summary>Creates the xaml object reader.</summary>
        /// <param name="instance">The instance.</param>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateXamlObjectReader
        // ReSharper disable once VirtualMemberNeverOverridden.Global
        protected virtual object CreateXamlObjectReader (
            object                   instance
          , XamlSchemaContext        context
          , XamlObjectReaderSettings settings
        )
        {
            return ProxyGenerator.CreateClassProxy (
                                                    typeof ( XamlObjectReader )
                                                  , new[] { instance , context , settings }
                                                  , _interceptor
                                                   ) ;
        }

        /// <summary>Creates the xaml object reader settings.</summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateXamlObjectReaderSettings
        // ReSharper disable once VirtualMemberNeverOverridden.Global
        protected virtual XamlObjectReaderSettings CreateXamlObjectReaderSettings ( )
        {
            return new XamlObjectReaderSettings ( )
                   {
                       AllowProtectedMembersOnRoot      = true
                     , RequireExplicitContentVisibility = false
                     , ValuesMustBeString               = false
                   } ;
        }

        /// <summary>Creates the XML writer.</summary>
        /// <param name="stringWriter">The string writer.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateXmlWriter
        // ReSharper disable once VirtualMemberNeverOverridden.Global
        protected virtual XmlWriter CreateXmlWriter ( StringWriter stringWriter )
        {
            var x = XmlWriter.Create ( stringWriter ) ;
            var xmlWriterProxy = ProxyGenerator.CreateClassProxyWithTarget ( x , _interceptor ) ;
            return xmlWriterProxy ;
        }

        /// <summary>Creates the string writer.</summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateStringWriter
        // ReSharper disable once VirtualMemberNeverOverridden.Global
        protected virtual StringWriter CreateStringWriter ( )
        {
            return ProxyGenerator.CreateClassProxy < StringWriter > ( _interceptor ) ;
        }

        /// <summary>Creates the xaml schema context.</summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateXamlSchemaContext
        // ReSharper disable once VirtualMemberNeverOverridden.Global
        protected virtual XamlSchemaContext CreateXamlSchemaContext ( )
        {
            return ProxyGenerator.CreateClassProxy < XamlSchemaContext > ( _interceptor ) ;
        }

        /// <summary>Creates the proxy.</summary>
        /// <param name="writeLine">The write line.</param>
        /// <param name="interceptor">The interceptor.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateProxy
        // ReSharper disable once UnusedMember.Global
        public static ProxyUtils CreateProxy (
            Action < string > writeLine
          , IInterceptor      interceptor
        )
        {
            return ( ProxyUtils ) ProxyGenerator.CreateClassProxy (
                                                                   typeof ( ProxyUtils )
                                                                 , new object[]
                                                                   {
                                                                       writeLine , interceptor
                                                                   }
                                                                 , interceptor
                                                                  ) ;
        }
    }
}

namespace WpfApp
{
    internal class X
    {
        public bool Written ;

        /// <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        public X ( bool written = false ) { Written = written ; }
    }
}