using System ;
using JetBrains.Annotations ;
using NLog.Layouts ;
using Tests.Lib.Logging ;
using WpfApp.Core.Logging ;
using Xunit ;
using Xunit.Abstractions ;

namespace Tests.Lib.Fixtures
{
    /// <summary>Test fixture to provide logging for the individual test case. In order to use, the individual test class must be tagged with the <seealso cref="IClassFixture{TFixture}"/>. Method <seealso cref="SetOutputHelper"/> must be invoked with the <seealso cref="ITestOutputHelper"/> instance supplied by Xunit through the class constructor.</summary>
    [ UsedImplicitly ]
    public class LoggingFixture : IDisposable
    {
        /// <summary>Sets the output helper.</summary>
        /// <param name="value">The value.</param>
        /// <param name="minLogLevel"></param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetOutputHelper
        public void SetOutputHelper ( ITestOutputHelper value, NLog.LogLevel minLogLevel = null)
        {
            if ( _xunitTarget != null )
            {
                AppLoggingConfigHelper.RemoveTarget ( _xunitTarget ) ;
                _xunitTarget.Dispose ( ) ;
            }

            if ( value == null )
            {
                _xunitTarget = null ;
                return ;
            }

            _xunitTarget = new XunitTarget ( "Xunit" ) { OutputHelper = value } ;
            AppLoggingConfigHelper.AddTarget ( _xunitTarget, minLogLevel ) ;
        }

        private XunitTarget _xunitTarget ;

        /// <summary>Gets or sets the layout used to format log messages.</summary>
        /// <remarks>
        /// The default value of the layout is: <v>${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}</v>
        /// </remarks>
        /// <docgen category="Layout Options" order="1" />
        // ReSharper disable once UnusedMember.Global
        public Layout Layout { get => _xunitTarget.Layout ; set => _xunitTarget.Layout = value ; }

        /// <summary>
        ///     Initializes a new instance of the <see cref="System.Object" />
        ///     class.
        /// </summary>
        public LoggingFixture ( IMessageSink sink )
        {
            sink.OnMessage ( new DiagnosticMessage ( "Constructing LoggingFixture." ) ) ;
            FixtureLogger.LogFixtureCreatedLifecycleEvent ( GetType ( ) ) ;
        }


        // ReSharper disable once IdentifierTypo

        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose ( )
        {
            if ( _xunitTarget != null )
            {
                AppLoggingConfigHelper.RemoveTarget ( _xunitTarget ) ;
                _xunitTarget.Dispose ( ) ;
            }

            FixtureLogger.LogFixtureFinalizedLifecycleEvent ( GetType ( ) ) ;
        }
    }
}