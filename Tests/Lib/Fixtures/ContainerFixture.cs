#region header
// Kay McCormick (mccor)
// 
// FileFinder3
// WpfApp1Tests3
// ContainerFixture.cs
// 
// 2020-01-19-5:59 PM
// 
// ---
#endregion

using System.Threading.Tasks ;
using Autofac ;

using JetBrains.Annotations ;
using NLog ;
using WpfApp.Core.Utils ;
using Xunit ;

namespace TestLib.Fixtures
{
    /// <summary></summary>
    /// <seealso cref="Xunit.IAsyncLifetime" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ContainerFixture
    [ UsedImplicitly ]
    public class ContainerFixture : IAsyncLifetime
    {
        // ReSharper disable once UnusedMember.Local
        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

        /// <summary>The container</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _container
        private readonly ILifetimeScope _container ;

        /// <summary>
        ///     Initializes a new instance of the <see cref="T:System.Object" />
        ///     class.
        /// </summary>
        public ContainerFixture ( )
        {
            _container    = ContainerHelper.SetupContainer ( out _ ) ;
            LifetimeScope = _container.BeginLifetimeScope ( ) ;
        }

        /// <summary>Gets the lifetime scope.</summary>
        /// <value>The lifetime scope.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LifetimeScope
        public ILifetimeScope LifetimeScope { get ; }


        /// <summary>
        ///     Called immediately after the class has been created, before it is used.
        /// </summary>
        public Task InitializeAsync ( ) { return Task.CompletedTask ; }


        /// <summary>
        ///     Called when an object is no longer needed. Called just before
        ///     <see cref="M:System.IDisposable.Dispose" />
        ///     if the class also implements that.
        /// </summary>
        public Task DisposeAsync ( )
        {
            LifetimeScope?.Dispose ( ) ;
            _container?.Dispose ( ) ;
            return Task.CompletedTask ;
        }
    }
}