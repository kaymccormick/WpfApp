#region header
// Kay McCormick (mccor)
// 
// Common
// CommonTests
// TestResolveServiceConverter.cs
// 
// 2020-01-30-7:10 AM
// 
// ---
#endregion
using System ;
using System.Globalization ;
using AppShared ;
using Autofac ;
using Common.Converters ;
using CommonTests.Fixtures ;
using TestLib.Attributes ;
using Xunit ;
using Xunit.Abstractions ;

namespace CommonTests.Converters
{
    /// <summary></summary>
    /// <seealso cref="Xunit.IClassFixture{CommonTests.Fixtures.ContainerFixture}" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestResolveServiceConverter
    [LogTestMethod, BeforeAfterLogger]
    public class TestResolveServiceConverter : IClassFixture < testContainerFixture >
    {
        private readonly testContainerFixture  _fixture ;
        private readonly ITestOutputHelper _output ;

        /// <summary>
        ///     Initializes a new instance of the <see cref="T:System.Object" />
        ///     class.
        /// </summary>
        public TestResolveServiceConverter ( testContainerFixture fixture , ITestOutputHelper output )
        {
            _fixture = fixture ;
            _output  = output ;
        }

        /// <summary>Tests the conversion1.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TestConversion1
        [WpfFact ]
        public void TestConversion1 ( )
        {
            // takes IComponentLifetime
            var svc = new ResolveService {
                ServiceType = typeof ( Lazy<IRandom> )
            };

            _fixture.Container.Resolve < Lazy < IRandom > > ( ) ;

            var resolveConv = new ResolveServiceConverter ( ) ;
            Assert.NotNull ( resolveConv ) ;

            var value = resolveConv.Convert (
                                             svc
                                           , null
                                           , _fixture.Container
                                           , CultureInfo.CurrentCulture
                                            ) ;
            Assert.NotNull ( value ) ;
            Assert.IsAssignableFrom < Lazy < IRandom > > ( value ) ;
            var lazy = ( Lazy < IRandom > ) value ;
            _output.WriteLine ( $"IsValueCreated = {lazy.IsValueCreated}" ) ;
            _output.WriteLine ( $"Value = {lazy.Value}" ) ;
        }
    }
}