using System.ComponentModel ;
using System.Reflection ;
using JetBrains.Annotations ;
using NLog ;
using NLog.Config ;
using NLog.Layouts ;
using NLog.Targets ;
using WpfApp.Core.Logging ;
using Xunit.Sdk ;

namespace Tests.Attributes
{
    /// <summary></summary>
    /// <seealso cref="Xunit.Sdk.BeforeAfterTestAttribute" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for BeforeAfterLoggerAttribute
    public class BeforeAfterLoggerAttribute : BeforeAfterTestAttribute
    {
        private const string Name = "test target" ;

        /// <summary>Gets or sets the test logging rule.</summary>
        /// <value>The test logging rule.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TestLoggingRule
        public LoggingRule TestLoggingRule { get ; set ; }

        /// <summary>Gets or sets the test file target.</summary>
        /// <value>The test file target.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TestFileTarget
        public FileTarget TestFileTarget { get ; set ; }

        /// <summary>
        ///     This method is called after the test method is executed.
        /// </summary>
        /// <param name="methodUnderTest">The method under test</param>
        [EditorBrowsable( EditorBrowsableState.Never)]
        public override void After ( MethodInfo methodUnderTest )

        {
            LogManager.LogFactory.Configuration.LoggingRules.Remove ( TestLoggingRule ) ;
            LogManager.LogFactory.Configuration.RemoveTarget ( Name ) ;
            LogManager.LogFactory.ReconfigExistingLoggers ( ) ;
        }

        /// <summary>
        ///     This method is called before the test method is executed.
        /// </summary>
        /// <param name="methodUnderTest">The method under test</param>
        [EditorBrowsable( EditorBrowsableState.Never)]
        public override void Before ( [ NotNull ] MethodInfo methodUnderTest )
        {
            AppLoggingConfigHelper.EnsureLoggingConfigured ( ) ;
            TestFileTarget = new FileTarget ( Name ) ;
            var fileTarget = TestFileTarget ;
            fileTarget.FileName = Layout.FromString (
                                                     "test-"
                                                     + methodUnderTest.DeclaringType
                                                     + "."
                                                     + methodUnderTest.Name
                                                     + ".txt"
                                                    ) ;
            LogManager.LogFactory.Configuration.AddTarget ( fileTarget ) ;
            var loggingRule = new LoggingRule ( "*" , LogLevel.Trace , fileTarget ) ;
            TestLoggingRule = loggingRule ;
            LogManager.LogFactory.Configuration.LoggingRules.Insert ( 0 , loggingRule ) ;
            LogManager.LogFactory.ReconfigExistingLoggers ( ) ;
        }
    }
}