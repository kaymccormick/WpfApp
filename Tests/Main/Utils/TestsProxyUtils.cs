using System;
using System.Diagnostics ;
using NLog ;
using NLog.Layouts ;
using Tests.Lib.Fixtures ;
using WpfApp.Proxy ;
using Xunit ;
using Xunit.Abstractions ;

namespace Tests.Main.Utils
{
    /// <summary>Tests for ProxyUtils</summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestsProxyUtils
    [Collection("GeneralPurpose")]
    public class TestsProxyUtils : IClassFixture <LoggingFixture>, IDisposable
    {
        private readonly LoggingFixture _loggingFixture ;

        /// <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        public TestsProxyUtils (LoggingFixture loggingFixture, ITestOutputHelper helper )
        {
            _loggingFixture = loggingFixture ;
            _loggingFixture.SetOutputHelper(helper);
            _loggingFixture.Layout = Layout.FromString ( "${message}" ) ;
        }

        // ReSharper disable once InconsistentNaming
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

        private void WriteOut ( string s )
        {
            Logger.Info(s);
        }

        /// <summary>Test1s this instance.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Test1
        [WpfFact]
        public void Test1()
        {
            var p = new ProxyUtils(WriteOut, ProxyUtilsBase.CreateInterceptor(WriteOut));
            var xamlSchemaContext = p.CreateXamlSchemaContext();
            Logger.Info("{schemaContext}", xamlSchemaContext);
            var i = 0;
            const bool limitOutput = false ;
            foreach (var ns in xamlSchemaContext.GetAllXamlNamespaces())
            {
                var allXamlTypes = xamlSchemaContext.GetAllXamlTypes(ns);
                Logger.Debug("{numtypes} {namespace}", allXamlTypes.Count, ns);
                i++;
                if (limitOutput && i >= 5)
                {
                    break;
                }

                // continue ;
                foreach (var t in allXamlTypes)
                {
                    if ( t.IsMarkupExtension )
                    {
                        Logger.Debug ( "{t}" , t ) ;
                    }

                    continue ;
                    Logger.Debug("{t}", t);
                    var j = 0;
                    j++;
                    if (limitOutput && j >= 5)
                    {
                        break;
                    }
                }


            }
        }

        /// <summary>Test1s this instance.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Test1
        [ WpfFact ]
        public void Test2 ( )
        {
            PresentationTraceSources.Refresh();
            var x1 = new NLogTraceListener { ForceLogLevel = LogLevel.Debug } ;
            PresentationTraceSources.MarkupSource.Listeners.Add ( x1 ) ;
            PresentationTraceSources.MarkupSource.Switch.Level = SourceLevels.All ;
            var x = new ProxyUtils(WriteOut, ProxyUtilsBase.CreateInterceptor(WriteOut));
            var @out = x.TransformXaml2 ( @"files/test.xaml" ) ;
            Logger.Debug ( "{out}" , @out ) ;

        }

        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            public void Dispose ( )
        {
            _loggingFixture.SetOutputHelper(null);
        }
    }
}
