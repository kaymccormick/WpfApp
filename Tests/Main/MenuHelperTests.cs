using System ;
using NLog ;
using Tests.Attributes ;
using Tests.Lib.Fixtures ;
using WpfApp.Core.Interfaces ;
using WpfApp.Core.Menus ;
using Xunit ;
using Xunit.Abstractions ;

namespace Tests.Main
{
    /// <summary></summary>
    [ Collection ( "WpfApp" ) ]
    [ LogTestMethod ] [ BeforeAfterLogger ] 
    public class MenuHelperTests : IClassFixture <LoggingFixture>, IDisposable
    {
        private readonly LoggingFixture _loggingFixture ;

        // ReSharper disable once UnusedMember.Local
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

#pragma warning disable 649
        private readonly Func < IMenuItem > _xMenuItemCreator ;
#pragma warning restore 649


        /// <summary>Initializes a new instance of the <see cref="MenuHelperTests"/> class.</summary>
        /// <param name="wpfAppFixture">The WPF application fixture.</param>
        /// <param name="containerFixture">The container fixture.</param>
        /// <param name="outputHelper">The output helper.</param>
        /// <param name="loggingFixture">The logging fixture.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public MenuHelperTests (
            WpfApplicationFixture wpfAppFixture
          , AppContainerFixture   containerFixture
          // , UtilsContainerFixture utilsContainerFixture
          , ITestOutputHelper     outputHelper
            , LoggingFixture loggingFixture
        )
        {
            _loggingFixture = loggingFixture ;
            loggingFixture.SetOutputHelper(outputHelper);
        }

        /// <summary>Makes the menu item test.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MakeMenuItemTest
        [ WpfFact ]
        public void MakeMenuItemTest ( )
        {
            var header = "test" ;
            var arg = _xMenuItemCreator ( ) ;
            arg.Header = header ;
            Assert.NotNull ( arg ) ;
            var item = MenuHelper.MakeMenuItem ( arg ) ;
            Assert.NotNull ( item ) ;
            Assert.Equal ( header , item.Header ) ;
        }

        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose ( )
        {
            _loggingFixture.Dispose();
        }
    }
}