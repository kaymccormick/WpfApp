using System ;
using System.Linq ;
using NLog ;
using NLog.Config ;
using NLog.Targets ;
using Tests.Attributes ;
using Tests.Lib.Fixtures ;
using WpfApp.Core.Logging ;
using Xunit ;
using Xunit.Abstractions ;

namespace Tests.Main
{
    /// <summary></summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for LogConfigTest
    [ BeforeAfterLogger] [LogTestMethod ] [Collection("GeneralPurpose")]
    public class LogConfigTest : IClassFixture <LoggingFixture>, IDisposable
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="System.Object" />
        ///     class.
        /// </summary>
        /// <param name="output"></param>
        /// <param name="loggingFixture"></param>
        public LogConfigTest ( ITestOutputHelper output, LoggingFixture loggingFixture )
        {
            _loggingFixture = loggingFixture ;
            loggingFixture.SetOutputHelper(output);
        }

        private readonly LoggingFixture _loggingFixture ;

        // ReSharper disable once ParameterOnlyUsedForPreconditionCheck.Local
        /// <summary>Checks the log configuration.</summary>
        /// <param name="configuration">The configuration.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckLogConfig
        private void CheckLogConfig ( LoggingConfiguration configuration )
        {
            Assert.NotEmpty ( configuration.AllTargets ) ;
            Assert.NotEmpty (
                             configuration.AllTargets.Select ( target => target is DebugTarget )
                            ) ;
            Assert.NotEmpty (
                             configuration.AllTargets.Select (
                                                              target => target is NLogViewerTarget
                                                             )
                            ) ;
            Assert.NotEmpty (
                             configuration.AllTargets.Select ( target => target is ChainsawTarget )
                            ) ;
            Assert.NotEmpty (
                             configuration.AllTargets.Select ( target => target is MyCacheTarget )
                            ) ;

            // var q =
            // from target in configuration.AllTargets
            // join rule in configuration.LoggingRules on target ;
        }

        /// <summary>Tests the ensure configuration two arguments.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TestEnsureConfigTwoArgs
        [ Fact ]
        public void TestEnsureConfigTwoArgs ( )
        {
            AppLoggingConfigHelper.EnsureLoggingConfigured ( ) ;
            CheckLogConfig ( LogManager.Configuration ) ;
        }

        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose ( )
        {
            // _loggingFixture?.Dispose ( ) ;
            _loggingFixture.SetOutputHelper ( null ) ;
        }
    }
}