using System ;
using System.Collections.Generic ;
using System.Diagnostics ;
using System.Linq ;
using System.Windows ;
using Autofac ;
using JetBrains.Annotations ;
using NLog ;
using Tests.Lib.Attributes ;
using Tests.Lib.Fixtures ;
using WpfApp.Core.Interfaces ;
using WpfApp.Core.Logging ;
using Xunit ;
using Xunit.Abstractions ;

namespace Tests.Main
{
    /// <summary></summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ContainerHelperTests
    [ WpfTestApplication ] [ Collection ( "WpfApp" ) ] [ BeforeAfterLogger ] [ LogTestMethod ]
    public class ContainerHelperTests : IClassFixture < LoggingFixture >, IDisposable
    {
        // ReSharper disable once NotAccessedField.Local
        private readonly WpfApplicationFixture _wpfApplicationFixture ;
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;
        static ContainerHelperTests ( ) { Debug.WriteLine ( "Initialization" ) ; }

        /// <summary>
        ///     Initializes a new instance of the <see cref="T:System.Object" />
        ///     class.
        /// </summary>
        public ContainerHelperTests (
            LoggingFixture        loggingFixture
          , ITestOutputHelper     output
          , WpfApplicationFixture wpfApplicationFixture,
            AppContainerFixture appContainerFixture
        )
        {
            _wpfApplicationFixture = wpfApplicationFixture ;
            loggingFixture.SetOutputHelper(output);
            
            UseLogMethod = LogMethod ;
            UseLogMethod ( $"my logger is type {Logger.GetType ( )}" ) ;
            LoggingFixture = loggingFixture ;
           
            Output                = output ;
            Scope = appContainerFixture.LifetimeScope.BeginLifetimeScope (
                                                                          nameof (
                                                                              ContainerHelperTests )
                                                                         ) ;
        }

        // ReSharper disable once UnusedAutoPropertyAccessor.Global
        public LoggingFixture LoggingFixture { get ; }

        public ITestOutputHelper Output { get ; }

        /// <summary>
        ///     Initializes a new instance of the <see cref="T:System.Object" />
        ///     class.
        /// </summary>
        // public ContainerHelperTests ( WpfApplicationFixture WpfApplicationFixture ) { WpfApplicationFixture = WpfApplicationFixture ; }
        
        public LogDelegates.LogMethod UseLogMethod { get ; }


        private void LogMethod ( string message )
        {
            Debug.WriteLine ( message ) ;
            Output?.WriteLine ( message ) ;
        }

        public ILifetimeScope Scope { get ; }
        /// <summary>Containers the test resolve i menu item list.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ContainerTestResolveIMenuItemList
        [ Fact ] [ UsedImplicitly ] [ Trait ( "Working" , "false" ) ]
        public void ContainerTestResolveIMenuItemList ( )
        {
            
            var menuItemList = Scope.Resolve < IMenuItemList > ( ) ;
            Assert.NotNull ( menuItemList ) ;
            Assert.NotEmpty ( menuItemList ) ;
            Assert.NotEmpty ( menuItemList.First ( ).Children ) ;
        }

        [ Fact ]
        public void ResolveWindows ( )
        {
            
            var enumerable = Scope.Resolve < IEnumerable < Lazy < Window > > > ( ) ;
            var l = enumerable.ToList ( ) ;
            Assert.NotEmpty ( l ) ;
            Assert.All ( l , Assert.NotNull ) ;
        }

        /// <summary>Tests the resolve top level menu.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TestResolveTopLevelMenu
        [ Fact ]
        public void TestResolveTopLevelMenu ( )
        {
            
            var topLevelMenus = Scope.Resolve < IEnumerable < ITopLevelMenu > > ( ).ToList ( ) ;
            Assert.NotEmpty ( topLevelMenus ) ;
            foreach ( var topLevelMenu in topLevelMenus )
            {
                Logger.Debug ( $"{topLevelMenu.GetXMenuItem ( ).Header}" ) ;
            }
        }

        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose ( )
        {
            LoggingFixture?.Dispose ( ) ;
            Scope?.Dispose ( ) ;
        }
    }
}