using System ;
using KayMcCormick.Test.Common.Fixtures ;
using NLog ;
using NLog.Layouts ;
using WpfApp.Application ;
using WpfApp.Core.Container ;
using Xunit ;
using Xunit.Abstractions ;

namespace Tests.Main
{
    /// <summary>Tests for primary application class <see cref="App"/>.</summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for AppTests
    [ Collection ( "GeneralPurpose" ) ]
    public class AppTests : IClassFixture < LoggingFixture > , IDisposable
    {
        // ReSharper disable once UnusedMember.Local
        // ReSharper disable once InconsistentNaming
        private static   Logger            Logger = LogManager.GetCurrentClassLogger ( ) ;
        private readonly LoggingFixture    _loggingFixture ;

        /// <summary>Initializes a new instance of the <see cref="System.Object" /> class.</summary>
        public AppTests ( ITestOutputHelper output , LoggingFixture loggingFixture )
        {
            _loggingFixture = loggingFixture ;
            loggingFixture.SetOutputHelper ( output ) ;
            _loggingFixture.Layout = Layout.FromString ( "${message}" ) ;
        }

        /// <summary>Tests application of configuration in the app.config file.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TestApplyConfiguration
        [ WpfFact ]
        public void TestApplyConfiguration ( )
        {
            using var app = new App ( ) ;
            Assert.NotNull ( app ) ;
            Assert.Collection (
                               app.ConfigSettings
                             , o => Assert.IsType < ContainerHelperSettings > ( o )
                              ) ;
        }


        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose ( )
        {
            // _loggingFixture?.Dispose ( ) ;
            _loggingFixture.SetOutputHelper ( null ) ;
        }
    }
}